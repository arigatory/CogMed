from datetime import datetime

from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove


from loader import dp
from aiogram import types

from models.medical_card import MedicalCard
from states import MedicalCardStates
import fpdf
import os


questions = {
    1: "–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ:",
    2: "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",
    3: "–ü–æ–ª:",
    4: "–ü—Ä–∏–º–µ—Ä–Ω—ã–π –†–æ—Å—Ç –∏ –í–µ—Å",
    5: "—á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ/ –ø—Ä–∏—á–∏–Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è/–≤–µ–¥—É—â–∏–π —Å–∏–º–ø—Ç–æ–º/–∂–∞–ª–æ–±–∞:",
    6: "–ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å:",
    7: "–ö–∞–∫ –¥–æ–ª–≥–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç:",
    8: "–ö–∞–∫ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ (—Å—Ç–∞–ª–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å —Å–∏–ª—å–Ω–µ–µ, —Å–ª–∞–±–æ–µ–µ, –±–µ—Å–ø–æ–∫–æ–∏—Ç —Ç–æ—á–Ω–æ —Ç–∞–∫–∂–µ):",
    9: "–ê–ª–ª–µ—Ä–≥–∏–∏ –Ω–∞ —á—Ç–æ –ª–∏–±–æ, –Ω–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å —á–µ–≥–æ –ª–∏–±–æ:",
    10: "–°—Ç–∞–≤–∏–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–∏–∞–≥–Ω–æ–∑—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –∂–∏–∑–Ω–∏/ –ø–µ—Ä–µ–Ω–æ—Å–∏–ª–∏ –∫–∞–∫–∏–µ –ª–∏–±–æ –æ–ø–µ—Ä–∞—Ü–∏–∏?:",
    11: "–ü—Ä–æ—Ö–æ–¥–∏–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –∫–∞–∫–∏–µ -–ª–∏–±–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (–ú–†–¢, –ö–¢, –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –∞–Ω–∞–ª–∏–∑—ã –∫—Ä–æ–≤–∏, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –Ω–µ—Ä–≤–æ–≤, –¥—ã—Ö–∞–Ω–∏—è, –∂–µ–ª—É–¥–∫–∞, –∫–∏—à–µ—á–Ω–∏–∫–∞, –∫–æ—Å—Ç–µ–π, —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã, –ø–µ—á–µ–Ω–∏, –º–æ—á–µ–ø–æ–ª–æ–≤—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤..):",
    12: "–í —Å–µ–º—å–µ –∫—Ç–æ-—Ç–æ —á–µ–º-—Ç–æ –±–æ–ª–µ–µ—Ç (—Ç–æ–ª—å–∫–æ –∫—Ä–æ–≤–Ω—ã–µ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏):",
    13: "–ü—Ä–æ–∂–∏–≤–∞–µ—Ç–µ 1 –∏–ª–∏ —Å –∫–µ–º-—Ç–æ?:",
    14: "–ì–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ/—Ä–∞–±–æ—Ç–∞–ª–∏/–Ω–∞ –ø–µ–Ω—Å–∏–∏:",
    15: "–ò–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–µ—Ç—Å—è –∏–ª–∏ –Ω–µ—Ç?:",
    16: "–ß—Ç–æ —Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –æ—Å–Ω–æ–≤–µ (–ø—Ä–µ–ø–∞—Ä–∞—Ç—ã, –æ—Ç–≤–∞—Ä—ã, –Ω–∞—Å—Ç–æ–∏, –º–∞–∑–∏, –∫—Ä–µ–º–∞, —Å–≤–µ—á–∏, —Ç—Ä–∞–≤—ã)"
}


class MyPDF(fpdf.FPDF):
    def __init__(self, m):
        super().__init__()
        self.message = m
    """"""
    # ----------------------------------------------------------------------
    def header(self):
        """
        Header on each page
        """
        # set the font for the header, B=Bold
        self.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True)
        self.set_font('DejaVu', '', 14)
        # insert my logo
        self.image(r"C:\Users\ariga\1med\bot\1medbot\logo.jpg", x=10, y=8, w=23)
        # position logo on the right
        self.cell(w=80)
        title = f"–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.message.from_user.first_name}"
        # Calculate width of title and position
        w = self.get_string_width(title) + 6
        self.set_x((210 - w) / 2)
        # Colors of frame, background and text
        self.set_draw_color(0, 80, 180)
        self.set_fill_color(230, 230, 0)
        self.set_text_color(220, 50, 50)
        # Thickness of frame (1 mm)
        self.set_line_width(1)
        # Title
        self.cell(w, 9, title, 1, 1, 'C', 1)
        # Line break
        self.ln(10)

        # page title
        self.cell(200, 20, txt=f"–î–∞–Ω–Ω—ã–µ telegram: ({self.message.from_user.username}, id:{self.message.from_user.id})", border=0, ln=1, align="C")

        # insert a line break of 20 pixels
        self.ln(20)

    def chapter_title(self, num, label):
        # Background color
        self.set_fill_color(200, 220, 255)
        # Title
        self.cell(0, 6, '–í–æ–ø—Ä–æ—Å %d : %s' % (num, label), 0, 1, 'L', True)
        # Line break
        self.ln(4)


    # ----------------------------------------------------------------------
    def footer(self):
        """
        Footer on each page
        """
        # position footer at 15mm from the bottom
        self.set_y(-15)

        # set the font, I=italic
        self.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True)
        self.set_font('DejaVu', '', 14)
        # display the page number and center it
        pageNum = "–°—Ç—Ä–∞–Ω–∏—Ü–∞ %s/{nb}" % self.page_no()
        self.cell(0, 10, pageNum, align="C")


@dp.message_handler(text='üìö –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–∞—Ä—Ç–∞')
async def enter_medical_card(message: types.Message):
    await message.answer("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω—è—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∫–∞—Ä—Ç—É:\n"
                         "‚úîÔ∏è–í–æ–ø—Ä–æ—Å ‚Ññ1\n\n" + questions[1], reply_markup=ReplyKeyboardRemove())
    await MedicalCardStates.Q1_FIO.set()


@dp.message_handler(state=MedicalCardStates.Q1_FIO)
async def answer_q1(message: types.Message, state: FSMContext):
    answer = message.text
    medical_card = MedicalCard(message.from_user.id)
    medical_card.answers[1] = answer
    await state.update_data(medical_card=medical_card)
    await message.answer("‚úîÔ∏è–í–æ–ø—Ä–æ—Å ‚Ññ2\n\n" + questions[2])
    await MedicalCardStates.next()


@dp.message_handler(state=MedicalCardStates.Q2_FIO)
async def answer_q2(message: types.Message, state: FSMContext):
    answer = message.text
    data = await state.get_data()
    medical_card: MedicalCard = data.get("medical_card")
    medical_card.answers[2] = answer
    await state.update_data(medical_card=medical_card)
    await message.answer("‚úîÔ∏è–í–æ–ø—Ä–æ—Å ‚Ññ3\n\n" + questions[3])
    await MedicalCardStates.next()


@dp.message_handler(state=MedicalCardStates.Q3_FIO)
async def answer_q3(message: types.Message, state: FSMContext):
    answer = message.text
    data = await state.get_data()
    medical_card: MedicalCard = data.get("medical_card")
    medical_card.answers[3] = answer
    await state.update_data(medical_card=medical_card)
    await message.answer("‚úîÔ∏è–í–æ–ø—Ä–æ—Å ‚Ññ4\n\n" + questions[4])
    await MedicalCardStates.next()


@dp.message_handler(state=MedicalCardStates.Q4_FIO)
async def answer_q4(message: types.Message, state: FSMContext):
    answer = message.text
    data = await state.get_data()
    medical_card: MedicalCard = data.get("medical_card")
    medical_card.answers[4] = answer
    await state.update_data(medical_card=medical_card)
    await message.answer("‚úîÔ∏è–í–æ–ø—Ä–æ—Å ‚Ññ5\n\n" + questions[5])
    await MedicalCardStates.next()


@dp.message_handler(state=MedicalCardStates.Q5_FIO)
async def answer_q5(message: types.Message, state: FSMContext):
    answer = message.text
    data = await state.get_data()
    medical_card: MedicalCard = data.get("medical_card")
    medical_card.answers[5] = answer
    await state.update_data(medical_card=medical_card)
    await message.answer("‚úîÔ∏è–í–æ–ø—Ä–æ—Å ‚Ññ6\n\n" + questions[6])
    await MedicalCardStates.next()


@dp.message_handler(state=MedicalCardStates.Q6_FIO)
async def answer_q6(message: types.Message, state: FSMContext):
    answer = message.text
    data = await state.get_data()
    medical_card: MedicalCard = data.get("medical_card")
    medical_card.answers[6] = answer
    await state.update_data(medical_card=medical_card)
    await message.answer("‚úîÔ∏è–í–æ–ø—Ä–æ—Å ‚Ññ7\n\n" + questions[7])
    await MedicalCardStates.next()


@dp.message_handler(state=MedicalCardStates.Q7_FIO)
async def answer_q7(message: types.Message, state: FSMContext):
    answer = message.text
    data = await state.get_data()
    medical_card: MedicalCard = data.get("medical_card")
    medical_card.answers[7] = answer
    await state.update_data(medical_card=medical_card)
    await message.answer("‚úîÔ∏è–í–æ–ø—Ä–æ—Å ‚Ññ8\n\n" + questions[8])
    await MedicalCardStates.next()


@dp.message_handler(state=MedicalCardStates.Q8_FIO)
async def answer_q8(message: types.Message, state: FSMContext):
    answer = message.text
    data = await state.get_data()
    medical_card: MedicalCard = data.get("medical_card")
    medical_card.answers[8] = answer
    await state.update_data(medical_card=medical_card)
    await message.answer("‚úîÔ∏è–í–æ–ø—Ä–æ—Å ‚Ññ9\n\n" + questions[9])
    await MedicalCardStates.next()


@dp.message_handler(state=MedicalCardStates.Q9_FIO)
async def answer_q9(message: types.Message, state: FSMContext):
    answer = message.text
    data = await state.get_data()
    medical_card: MedicalCard = data.get("medical_card")
    medical_card.answers[9] = answer
    await state.update_data(medical_card=medical_card)
    await message.answer("‚úîÔ∏è–í–æ–ø—Ä–æ—Å ‚Ññ10\n\n" + questions[10])
    await MedicalCardStates.next()


@dp.message_handler(state=MedicalCardStates.Q10_FIO)
async def answer_q10(message: types.Message, state: FSMContext):
    answer = message.text
    data = await state.get_data()
    medical_card: MedicalCard = data.get("medical_card")
    medical_card.answers[10] = answer
    await state.update_data(medical_card=medical_card)
    await message.answer("‚úîÔ∏è–í–æ–ø—Ä–æ—Å ‚Ññ11\n\n" + questions[11])
    await MedicalCardStates.next()


@dp.message_handler(state=MedicalCardStates.Q11_FIO)
async def answer_q11(message: types.Message, state: FSMContext):
    answer = message.text
    data = await state.get_data()
    medical_card: MedicalCard = data.get("medical_card")
    medical_card.answers[11] = answer
    await state.update_data(medical_card=medical_card)
    await message.answer("‚úîÔ∏è–í–æ–ø—Ä–æ—Å ‚Ññ12\n\n" + questions[12])
    await MedicalCardStates.next()


@dp.message_handler(state=MedicalCardStates.Q12_FIO)
async def answer_q12(message: types.Message, state: FSMContext):
    answer = message.text
    data = await state.get_data()
    medical_card: MedicalCard = data.get("medical_card")
    medical_card.answers[12] = answer
    await state.update_data(medical_card=medical_card)
    await message.answer("‚úîÔ∏è–í–æ–ø—Ä–æ—Å ‚Ññ13\n\n" + questions[13])
    await MedicalCardStates.next()


@dp.message_handler(state=MedicalCardStates.Q13_FIO)
async def answer_q13(message: types.Message, state: FSMContext):
    answer = message.text
    data = await state.get_data()
    medical_card: MedicalCard = data.get("medical_card")
    medical_card.answers[13] = answer
    await state.update_data(medical_card=medical_card)
    await message.answer("‚úîÔ∏è–í–æ–ø—Ä–æ—Å ‚Ññ14\n\n" + questions[14])
    await MedicalCardStates.next()


@dp.message_handler(state=MedicalCardStates.Q14_FIO)
async def answer_q14(message: types.Message, state: FSMContext):
    answer = message.text
    data = await state.get_data()
    medical_card: MedicalCard = data.get("medical_card")
    medical_card.answers[14] = answer
    await state.update_data(medical_card=medical_card)
    await message.answer("‚úîÔ∏è–í–æ–ø—Ä–æ—Å ‚Ññ15\n\n" + questions[15])
    await MedicalCardStates.next()


@dp.message_handler(state=MedicalCardStates.Q15_FIO)
async def answer_q15(message: types.Message, state: FSMContext):
    answer = message.text
    data = await state.get_data()
    medical_card: MedicalCard = data.get("medical_card")
    medical_card.answers[15] = answer
    await state.update_data(medical_card=medical_card)
    await message.answer("‚úîÔ∏è–í–æ–ø—Ä–æ—Å ‚Ññ16\n\n" + questions[16])
    await MedicalCardStates.next()


@dp.message_handler(state=MedicalCardStates.Q16_FIO)
async def answer_q15(message: types.Message, state: FSMContext):
    answer = message.text
    data = await state.get_data()
    medical_card: MedicalCard = data.get("medical_card")
    medical_card.answers[16] = answer
    await state.update_data(medical_card=medical_card)
    await state.finish()
    await message.answer("C–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã")
    pdf = MyPDF(message)
    pdf.alias_nb_pages()
    pdf.add_page()
    pdf.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True)
    pdf.set_font('DejaVu', '', 14)
    for key in questions:
        pdf.chapter_title(key, questions[key])
        pdf.cell(200, 10, txt=f"–û—Ç–≤–µ—Ç: {medical_card.answers[key]}", ln=1, align="L")
    path_name = f"medical_card_{message.from_user.username}_{message.from_user.id}_date_{datetime.now().strftime('%Y%m%d-%H%M%S')}.pdf"
    pdf.output(path_name)
    doc = open(path_name, 'rb')
    await dp.bot.send_document(message.chat.id, doc)
    await dp.bot.sen
    doc.close()
